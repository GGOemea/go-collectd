// Code generated by protoc-gen-go.
// source: collectd.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	collectd.proto

It has these top-level messages:
	DispatchValuesRequest
	DispatchValuesReply
	QueryValuesRequest
	QueryValuesReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import collectd_types "collectd.org/rpc/proto/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// The arguments to DispatchValues.
type DispatchValuesRequest struct {
	Values *collectd_types.ValueList `protobuf:"bytes,1,opt,name=values" json:"values,omitempty"`
}

func (m *DispatchValuesRequest) Reset()                    { *m = DispatchValuesRequest{} }
func (m *DispatchValuesRequest) String() string            { return proto1.CompactTextString(m) }
func (*DispatchValuesRequest) ProtoMessage()               {}
func (*DispatchValuesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DispatchValuesRequest) GetValues() *collectd_types.ValueList {
	if m != nil {
		return m.Values
	}
	return nil
}

// The response from DispatchValues.
type DispatchValuesReply struct {
}

func (m *DispatchValuesReply) Reset()                    { *m = DispatchValuesReply{} }
func (m *DispatchValuesReply) String() string            { return proto1.CompactTextString(m) }
func (*DispatchValuesReply) ProtoMessage()               {}
func (*DispatchValuesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// The arguments to QueryValues.
type QueryValuesRequest struct {
	// Query by the fields of the identifier. Only return values matching the
	// specified shell wildcard patterns (see fnmatch(3)). Use '*' to match
	// any value.
	Identifier *collectd_types.Identifier `protobuf:"bytes,1,opt,name=identifier" json:"identifier,omitempty"`
}

func (m *QueryValuesRequest) Reset()                    { *m = QueryValuesRequest{} }
func (m *QueryValuesRequest) String() string            { return proto1.CompactTextString(m) }
func (*QueryValuesRequest) ProtoMessage()               {}
func (*QueryValuesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryValuesRequest) GetIdentifier() *collectd_types.Identifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

// The response from QueryValues.
type QueryValuesReply struct {
	Values []*collectd_types.ValueList `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
}

func (m *QueryValuesReply) Reset()                    { *m = QueryValuesReply{} }
func (m *QueryValuesReply) String() string            { return proto1.CompactTextString(m) }
func (*QueryValuesReply) ProtoMessage()               {}
func (*QueryValuesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryValuesReply) GetValues() []*collectd_types.ValueList {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto1.RegisterType((*DispatchValuesRequest)(nil), "collectd.DispatchValuesRequest")
	proto1.RegisterType((*DispatchValuesReply)(nil), "collectd.DispatchValuesReply")
	proto1.RegisterType((*QueryValuesRequest)(nil), "collectd.QueryValuesRequest")
	proto1.RegisterType((*QueryValuesReply)(nil), "collectd.QueryValuesReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Collectd service

type CollectdClient interface {
	// Dispatch collected values to collectd.
	DispatchValues(ctx context.Context, in *DispatchValuesRequest, opts ...grpc.CallOption) (*DispatchValuesReply, error)
	// Query a list of values available from collectd's value cache.
	QueryValues(ctx context.Context, in *QueryValuesRequest, opts ...grpc.CallOption) (*QueryValuesReply, error)
}

type collectdClient struct {
	cc *grpc.ClientConn
}

func NewCollectdClient(cc *grpc.ClientConn) CollectdClient {
	return &collectdClient{cc}
}

func (c *collectdClient) DispatchValues(ctx context.Context, in *DispatchValuesRequest, opts ...grpc.CallOption) (*DispatchValuesReply, error) {
	out := new(DispatchValuesReply)
	err := grpc.Invoke(ctx, "/collectd.Collectd/DispatchValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *collectdClient) QueryValues(ctx context.Context, in *QueryValuesRequest, opts ...grpc.CallOption) (*QueryValuesReply, error) {
	out := new(QueryValuesReply)
	err := grpc.Invoke(ctx, "/collectd.Collectd/QueryValues", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Collectd service

type CollectdServer interface {
	// Dispatch collected values to collectd.
	DispatchValues(context.Context, *DispatchValuesRequest) (*DispatchValuesReply, error)
	// Query a list of values available from collectd's value cache.
	QueryValues(context.Context, *QueryValuesRequest) (*QueryValuesReply, error)
}

func RegisterCollectdServer(s *grpc.Server, srv CollectdServer) {
	s.RegisterService(&_Collectd_serviceDesc, srv)
}

func _Collectd_DispatchValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatchValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectdServer).DispatchValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collectd.Collectd/DispatchValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectdServer).DispatchValues(ctx, req.(*DispatchValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Collectd_QueryValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CollectdServer).QueryValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/collectd.Collectd/QueryValues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CollectdServer).QueryValues(ctx, req.(*QueryValuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Collectd_serviceDesc = grpc.ServiceDesc{
	ServiceName: "collectd.Collectd",
	HandlerType: (*CollectdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DispatchValues",
			Handler:    _Collectd_DispatchValues_Handler,
		},
		{
			MethodName: "QueryValues",
			Handler:    _Collectd_QueryValues_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto1.RegisterFile("collectd.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0xce, 0xcf, 0xc9,
	0x49, 0x4d, 0x2e, 0x49, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0xb8,
	0x4b, 0x2a, 0x0b, 0x52, 0x8b, 0x21, 0xc2, 0x4a, 0x5e, 0x5c, 0xa2, 0x2e, 0x99, 0xc5, 0x05, 0x89,
	0x25, 0xc9, 0x19, 0x61, 0x89, 0x39, 0xa5, 0xa9, 0xc5, 0x41, 0xa9, 0x85, 0x40, 0xb2, 0x44, 0xc8,
	0x90, 0x8b, 0xad, 0x0c, 0x2c, 0x20, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xa9, 0x07, 0x37,
	0x10, 0xa2, 0x1f, 0xac, 0xdc, 0x27, 0xb3, 0xb8, 0x24, 0x08, 0xaa, 0x50, 0x49, 0x94, 0x4b, 0x18,
	0xdd, 0xac, 0x82, 0x9c, 0x4a, 0xa5, 0x00, 0x2e, 0xa1, 0xc0, 0xd2, 0xd4, 0xa2, 0x4a, 0x54, 0xf3,
	0xad, 0xb8, 0xb8, 0x32, 0x53, 0x52, 0xf3, 0x4a, 0x32, 0xd3, 0x32, 0x53, 0x8b, 0xa0, 0x76, 0x48,
	0xa1, 0xdb, 0xe1, 0x09, 0x57, 0x11, 0x84, 0xa4, 0x5a, 0xc9, 0x95, 0x4b, 0x00, 0xc5, 0x44, 0xa0,
	0x2d, 0x28, 0xee, 0x65, 0x26, 0xca, 0xbd, 0x46, 0x4b, 0x19, 0xb9, 0x38, 0x9c, 0xa1, 0x8a, 0x84,
	0x02, 0xb8, 0xf8, 0x50, 0x1d, 0x2f, 0x24, 0x8f, 0x30, 0x01, 0x6b, 0x10, 0x49, 0xc9, 0xe2, 0x56,
	0x00, 0x72, 0x91, 0x3b, 0x17, 0x37, 0x92, 0x2b, 0x85, 0x64, 0x10, 0xaa, 0x31, 0x83, 0x43, 0x4a,
	0x0a, 0x87, 0x2c, 0xd0, 0x20, 0x27, 0x89, 0x28, 0x31, 0xb8, 0x64, 0x7e, 0x51, 0xba, 0x7e, 0x51,
	0x41, 0xb2, 0x3e, 0x38, 0xf6, 0x92, 0xd8, 0xc0, 0x94, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x2b,
	0xe3, 0xfd, 0x17, 0xed, 0x01, 0x00, 0x00,
}
